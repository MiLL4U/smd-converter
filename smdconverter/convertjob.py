from __future__ import annotations

import datetime
from typing import Tuple

import numpy as np
from ibwpy.main import BinaryWave5

from .smdibwcnv import SimpledSMDIBWConverter
from .smdparser import SimpledSMDParser, SpectralUnit


class ConvertJob:
    def __init__(self, src_path: str, output_name: str) -> None:
        """Converter of smd data into ibw file.
        It contains source smd data and settings for conversion.

        Args:
            src_path (str): source data (smd data)
            output_name (str): name of output wave (used in igor)
        """
        self.__src_path = src_path
        self.output_name = output_name

        with open(src_path, mode='rb') as f:
            smd_buffer = f.read()
        self.__smd_data = SimpledSMDParser(smd_buffer)
        self.converter = SimpledSMDIBWConverter(self.__smd_data)
        self.__selected_detector = self.detector_ids[0]

    @property
    def smd_data(self) -> SimpledSMDParser:
        """getter of source smd data (SimpledSMDParser)

        Returns:
            SimpledSMDParser: source smd data
        """
        return self.__smd_data

    @property
    def selected_detector(self) -> int:
        """returns index of detector currently selected

        Returns:
            int: index of selected detector
        """
        return self.__selected_detector

    def select_detector(self, id_: int) -> ConvertJob:
        """select detector which converted

        Args:
            id_ (int): index of detector

        Raises:
            IndexError: when detector of selected index does not exist

        Returns:
            ConvertJob: self (selected detector changed)
        """
        if id_ not in self.detector_ids:
            raise IndexError(f"got invalid ID {id_}")
        self.__selected_detector = id_
        return self

    @property
    def src_path(self) -> str:
        """returns path of source smd file

        Returns:
            str: path of source file
        """
        return self.__src_path

    @property
    def detector_ids(self) -> Tuple[int, ...]:
        """returns tuple of available detector indices

        Returns:
            Tuple[int]: indices of detector
        """
        return tuple(range(self.__smd_data.detector_count))

    @property
    def detector_names(self) -> Tuple[str, ...]:
        """returns names of detectors contained in smd data

        Returns:
            Tuple[str]: name of detectors
        """
        return self.__smd_data.detector_names

    @property
    def detector_names_with_id(self) -> Tuple[str, ...]:
        """returns names of detector and its index as string
        (for displaying information)

        Returns:
            Tuple[str]: strings generated by concatenating index
                        and name of detectors
        """
        return tuple(f"{id_}: {name}" for id_, name
                     in zip(self.detector_ids, self.detector_names))

    @property
    def selected_detector_name(self) -> str:
        """returns name of detector currently selected

        Returns:
            str: name of selected detector
        """
        return self.__smd_data.detector_names[self.selected_detector]

    @property
    def selected_detector_name_with_id(self) -> str:
        """returns name and index of detector currently selected
        (for displaying information)

        Returns:
            str: strings generated by concatenating index and name of detector
        """
        return f"{self.selected_detector}: {self.selected_detector_name}"

    @property
    def shape(self) -> Tuple[int, ...]:
        return self.__smd_data.detector_array_size(self.selected_detector)

    @property
    def creation_time(self) -> datetime.datetime:
        return self.__smd_data.creation_datetime

    def spectral_axis_array(self, unit: SpectralUnit) -> np.ndarray:
        return self.__smd_data.spectral_axis(self.selected_detector, unit)

    def spectra_axis_ibw(self, unit: SpectralUnit, name: str) -> BinaryWave5:
        ibw = self.converter.make_spectral_axis(
            name=name, detector_id=self.selected_detector, unit=unit)
        return ibw

    def convert(self, path: str) -> None:
        ibw = self.converter.make_body(
            name=self.output_name, detector_id=self.selected_detector)
        save_path = f"{path}{self.output_name}.ibw"
        ibw.save(save_path)
        print(f"Saved: {save_path}")
